@namespace("edu.ucsc.soe.sequence-graph")
protocol SequenceGraph {
    
    // The schemas here describe a Sequence Graph. In the graph, Sides 
    // are nodes, linked by SequenceGraphEdges, which may be AlleleGroups or 
    // Adjacencies.
    
    // We also have Loci with IDs, which may be either Sites (containing
    // AlleleGroups) or Breakpoints (containing Adjacencies); SequenceGraphEdges 
    // can be joined against the Loci to see what Site or Breakpoint each
    // AlleleGroup or Adjacency to, or to find the SequenceGraphEdges in a set
    // of Sites or Breakpoints.
    
    // First, some basic structures to avoid repeating ourselves.
    
    record Region {
        // Identifies a genomic region. Fields should not be null unless you are
        // doing a projection.
        
        // What contig is it on? "chr1", "chr2", "chrM", etc. "novel" is used 
        // for novel insertions.
        union { null, string } = null;
        // Where does the region start (inclusive)?
        union { null, int } start = null;
        // Where does the region end (exclusive)?
        union { null, int } end = null; 
    }
    
    record PloidyBounds {
        // Upper and lower bounds on ploidy.
        
        // A lower bound on the ploidy. null means the lower bound is 1.
        union { null, int } lower = null;
        // An upper bound on the ploidy. null means the upper bound is the same
        // as the lower bound.
        union { null, int } upper = null;
    }
    
    // Parts of the sequence graph: Sides and SequenceGraphEdges and the
    // AlleleGroups and Adjacencies they contain
    
    record Side {
        // Represents an AlleleGroup side, a node in the graph where
        // AlleleGroups and Adjacencies are edges.
        
        // A unique ID for the Side
        union { null, string } id = null;
        
        // What Genome does this belong to?
        union { null, string } genome = null;
    }
    
    record Allele {
        // Holds a piece of sequence data to be referenced by ID. TODO: if most
        // AlleleGroups are now one base, isn't storing that one-base string by
        // ID horribly inefficient?
        
        // What's the allele's unique ID?
        union { null, string } id = null;
        
        // What Site is the allele from?
        union { null, string } site = null;
        
        // What non-unique string of bases does the allele represent?
        union { null, string } bases = null;
    }
    
    record AlleleGroup {
        // AVRO schema for an AlleleGroup. AlleleGroups are contained within
        // SequenceGraphEdges, which specify the Sides they link.
        
        // The ID for the Allele giving the sequence for this AlleleGroup
        union { null, string } allele = null;
    }
    
    record Adjacency {
        // AVRO schema for an Adjacency. Fields should not be null unless you
        // are doing a projection. Adjacencies are contained within
        // SequenceGraphEdges, which specify the Sides they link.
        
        // TODO: Do Adjacencies really need anything in them that isn't shared
        // with AlleleGroups?
    }
    
    record SequenceGraphEdge {
        // An edge in the Sequence Graph, representing either an Adjaceny or an
        // AlleleGroup. Fields should not be null unless you are doing a 
        // projection. We want to use one type here instead of two so that our
        // graph only has one type in its edge RDD.
        
        // A unique ID for the edge, used when it is referenced in the
        // annotation raph as a node.
        union { null, string } id = null;
        // The ID of the first (5') Side
        union { null, string } left = null;
        // The ID of the second (3') Side
        union { null, string } right = null;
        
        // The ID of the locus (site or breakpoint) where this Adjacency or 
        // AlleleGroup lives.
        union { null, string } locus = null;
        
        // The ploidy bounds on this Adjacency or AlleleGroup
        union { null, PloidyBounds } ploidy = null;
        
        // What Genome does this belong to?
        union { null, string } genome = null;
        
        // The Adjacency or AlleleGroup itself
        union { null, AlleleGroup, Adjacency } contents = null;
    }
    
    // Now Sites and Breakpoints and Loci to hold them.
    
    record Site {
        // Represents a Site which AlleleGroups can occupy. Fields should not be
        // null unless you are doing a projection. Stored in a Locus, which
        // provides a unique ID.
        
        // Where is the site?
        union { null, Region } region = null;
        
        // What reference is it defined on?
        union { null, string } reference = nullunion { null, string } referenceName = null;;
        
    }
    
    record Breakpoint {
        // Represents a Breakpoint between two Sites; Adjacencies can occupy it.
        // Stored in a Locus, which provides a unique ID.
        
        // TODO: do we want a graph of Sites and Breakpoints?
        
    }
    
    record Locus {
        // Represents a Site or Breakpoint. A bunch of these can be joined
        // against a bunch of SequenceGraphEdges to get the Site or Breakpoint
        // for each AlleleGroup or Adjacency.
        
        // A unique ID
        union { null, string } id = null;
        
        // The Site or Breakpoint we represent
        union { null, Site, Breakpoint } = null;
        
    }
    
    // Annotations: keyed by site, genome, or (site, genome) together. Can be
    // joined against to get annotation information for sites, genomes, or
    // specific sites in specific genomes.
    
    // TODO: Should these be made part of the things they annotate instead?
    
    record SiteAnnotation {
        // Holds metadata for a (variant) Site. Nobody annotates fixed Sites.
        
        // What Site locus are we annotating?
        union { null, string } site = null;
    }
    
    record VariantAnnotation {
        // Annotations for a particular Allele at a particular Site.
        
        // What site are we talking about?
        union { null, string } site = null;
        
        // And what allele's presence at that site are we annotating? Holds an
        // allele ID, not sequence.
        union { null, string } allele = null;

        // fields denote whether variant has been seen in dbSNP, Hapmap2/3, or
        // 1000 genomes
        union { boolean, null } inDbSNP = false;
        union { boolean, null } inHM2 = false;
        union { boolean, null } inHM3 = false;
        union { boolean, null } in1000G = false;
    }

    
    
    record GenomeAnnotation {
        // Annotation for a genome, many of which may exist in a Sample.
    
        // What genome are we annotating?
        union { null, string } genome = null;
        
        // What sample is it in?
        union { null, string } sample = null;
        
        // identifiers for genome cohort and genome ethnicity
        union { null, string } genomeEthnicity = null;
        union { null, string } genomeCohort = null;
        
        
    }    
    
    record AlleleCoverage {
        // Annotation for a certain Allele in a certain Site in a certain
        // Sample. Based on ADAMGenotype.
        
        // What Site does this belong to (Locus ID)?
        union { null, string } site = null;
        
        // What Sample does this belong to?
        union { null, string } sample = null;
        
        // What Allele (ID) is being annotated in that Site and Sample? An
        // allele ID of "<ambiguous>" means that the annotation is for the
        // unmapped reads known to belong to the site.
        union { null, string } allele = null;
        
        // Annotations

        // expected value of number of chromosomes with this allele at this 
        // site.
        union { null, double } expectedAlleleDosage = null;
        // read depth for this Allele at this Site
        union { null, int } depth = null;
        // RMS base quality score for reads aligned to this Allele in this Site
        union { null, int } rmsBaseQuality = null;
        // RMS mapping quality for reads aligned to this Allele in this Site
        union { null, int } rmsMappingQuality = null;
        // number of reads mapped at Site on forward strand of this Allele
        union { null, int } readsMappedForwardStrand = null;
        // number of reads mapped to this Allele in this Site with mapq = 0
        union { null, int } readsMappedMapQ0 = null;
    }
    
    record AdjacencyCoverage {
        // Annotation for coverage of an adjacency  between two Alleles in a
        // Sample.
        
        // TODO: Unify this somewhat with the two other coverage annotations.
        
        // What Sites does this belong to (Locus IDs)?
        union { null, string } site1 = null;
        union { null, string } site2 = null;
        
        // What Sample does this belong to?
        union { null, string } sample = null;
        
        // What Alleles (ID) are being annotated in that Site and Sample? An
        // allele ID of "<ambiguous>" means that the annotation is for the
        // unmapped reads known to belong to the site.
        union { null, string } allele1 = null;
        
        // Annotations

        // expected value of number of chromosomes with this allele at this 
        // site.
        union { null, double } expectedAlleleDosage = null;
        // read depth for this adjacency between these Sites
        union { null, int } depth = null;
        // RMS base quality score for reads aligned to this Allele in this Site
        union { null, int } rmsBaseQuality = null;
        // RMS mapping quality for reads aligned to these Alleles in these Sites
        union { null, int } rmsMappingQuality = null;
        // number of reads mapped at adjacency on forward strand of this Allele
        union { null, int } readsMappedForwardStrand = null;
        // number of reads mapped to these Alleles in these Sites with mapq = 0
        union { null, int } readsMappedMapQ0 = null;
    }
    
    record LinkCoverage {
        // Annotation for coverage of a linkage between two Alleles in a
        // Sample.
        
        // TODO: Unify this somewhat with the two other coverage annotations.
        
        // What Sites does this belong to (Locus IDs)?
        union { null, string } site1 = null;
        union { null, string } site2 = null;
        
        // What Sample does this belong to?
        union { null, string } sample = null;
        
        // What Alleles (ID) are being annotated in that Site and Sample? An
        // allele ID of "<ambiguous>" means that the annotation is for the
        // unmapped reads known to belong to the site.
        union { null, string } allele1 = null;
        
        // Annotations

        // expected value of number of chromosomes with this allele at this 
        // site.
        union { null, double } expectedAlleleDosage = null;
        // read depth for this adjacency between these Sites
        union { null, int } depth = null;
        // RMS base quality score for reads aligned to this Allele in this Site
        union { null, int } rmsBaseQuality = null;
        // RMS mapping quality for reads aligned to these Alleles in these Sites
        union { null, int } rmsMappingQuality = null;
        // number of reads mapped at adjacency on forward strand of this Allele
        union { null, int } readsMappedForwardStrand = null;
        // number of reads mapped to these Alleles in these Sites with mapq = 0
        union { null, int } readsMappedMapQ0 = null;
    }
}
