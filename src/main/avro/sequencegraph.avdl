@namespace("edu.ucsc.genome")
protocol SequenceGraph {
    
    import idl "reference.avdl";
    
    // From the reference genome model, we use:
    // Face: represents the 5' or 3' side of a base
    // Position: Represents either the 5' or 3' side of a base in the reference.
    // Side: Represents one side of a Site in the reference.
    // Edge: Connects two Sides.
    
    // The schemas here describe a Sequence Graph. In the graph, Sides are
    // nodes, linked by AlleleGroups or Adjacencies.
    
    // Telomeres are represented by Sides that are not involved in AlleleGroup
    // edges, and which correspond to before-the-beginning and after-the-end
    // positions on chromosomes.
    
    record PloidyBounds {
        // All edges in the Sequence Graph can have ploidy bounds specified. The
        // ploidy of that edge is restricted to nonnegative integers within
        // those bounds. Additionally, PloidyBounds objects can have variable
        // names assigned to them, allowing the ploidy they bound to be involved
        // in Constraints.
        
        // A lower bound on the ploidy.
        int lower = 1;
        
        // An upper bound on the ploidy. null means the upper bound is the same
        // as the lower bound.
        union { null, int } upper = null;
        
        // An optional, unique variable name for referencing this ploidy value
        // in Constraints.
        union { null, string } variable = null;
    }
    
    record AlleleGroup {
        // Represents zero or more instances of a certain allele, where no
        // phasing information is available to distinguish the instances. An
        // empty AlleleGroup, sometimes required to discard phasing information
        // while walking along a chromosome, can be specified by using an Edge
        // where the Positions of the Sides it connects are in reverse order
        // (i.e. the left face of base 3 and the right face of base 2). This
        // preserves the alternation of left and right faces when reading along
        // a single strand. Such an AlleleGroup may not contain a non-empty
        // Allele.
        
        // The Edge that specifies which Sides this AlleleGroup links.
        Edge edge;
        
        // The index of the Allele that this AlleleGroup represents, out of the
        // "alleles" array of the corresponding Site in the reference model.
        // Alternatively, a novel Allele object may be stored here.
        union { int, Allele } allele;
        
        // The ploidy bounds on this AlleleGroup.
        PloidyBounds ploidy;
        
        // What Genome does this belong to (optional)?
        union { null, string } genome = null;
    }
    
    record Adjacency {
        // Represents a covalent bond in the DNA backbone between two Sides.
        
        // The Edge that specifies which Sides this Adjacency links.
        Edge edge;
        
        // The ploidy bounds on this Adjacency.
        PloidyBounds ploidy;
        
        // What Genome does this belong to (optional)?
        union { null, string } genome = null;
    }
    
    record Transmission {
        // Represents the transmission of alleles in one AlleleGroup of one
        // genome to alleles in another AlleleGroup in another genome.
        
        // References AlleleGroups by edge ID.
        
        // The ID of the parent AlleleGroup's Edge
        long parent;
        
        // The ID of the child AlleleGroup's Edge
        long child;
        
        // How many alleles were transmitted from the parent to the child?
        PloidyBounds ploidy;
    }
    
    record Term {
        // Represents a variable and its weight in a Constraint.
        
        // What variable are we talking about? Must correspond to a variable
        // used to name a PloidyBounds.
        string variable;
        
        // What weight should be applied to this variable in the expression?
        double weight;
    }
    
    record Constraint {
        // A Linear Programming constraint of the form ({weight} * {variable}) +
        // ({weight} * {variable}) + ... <= {constant}
        
        // What are all the variables on the left hand side, with their weights?
        array<Term> terms;
        
        // What is the constant value that the sum of the terms must be less
        // than or equal to?
        int limit;
    }
    
}
