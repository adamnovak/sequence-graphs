@namespace("edu.ucsc.soe.sequencegraph")
protocol SequenceGraph {
    
    import idl "reference.avdl";
    
    // From the reference genome model (edu.ucsc.genome), we use:
    // Face: represents the 5' or 3' side of a base
    // Position: Represents either the 5' or 3' side of a base in the reference.
    // Side: Represents one side of a Site in the reference.
    // Edge: Connects two Sides.
    
    // The schemas here describe a Sequence Graph. In the graph, Sides are
    // nodes, linked by AlleleGroups or Adjacencies.
    
    // Telomeres are represented by Sides that are not involved in AlleleGroup
    // edges, and which correspond to before-the-beginning and after-the-end
    // positions on chromosomes.
    
    record PloidyBounds {
        // All AlleleGroups and Adjacencies can have ploidy bounds specified.
        // The ploidy of that edge is restricted to nonnegative integers within
        // those bounds. Additionally, PloidyBounds objects can have variable
        // names assigned to them, allowing the ploidy they bound to be involved
        // in Constraints.
        
        // A lower bound on the ploidy. null means the lower bound is 1.
        union { null, int } lower = null;
        
        // An upper bound on the ploidy. null means the upper bound is the same
        // as the lower bound.
        union { null, int } upper = null;
        
        // A unique variable name for referencing this ploidy value in
        // Constraints.
        union { null, string } variable = null;
    }
    
    record AlleleGroup {
        // Represents zero or more instances of a certain allele, where no
        // phasing information is available to distinguish the instances.
        
        // The Edge that specifies which Sides this AlleleGroup links.
        union { null, edu.ucsc.genome.Edge } edge = null;
        
        // The index of the Allele that this AlleleGroup represents, out of the
        // "alleles" array of the corresponding Site in the reference model.
        // Alternatively, a novel Allele object may be stored here.
        union { null, int, edu.ucsc.genome.Allele } allele = null;
        
        // The ploidy bounds on this Adjacency or AlleleGroup
        union { null, PloidyBounds } ploidy = null;
        
        // What Genome does this belong to?
        union { null, string } genome = null;
    }
    
    record Adjacency {
        // Represents a covalent bond in the DNA backbone between two Sides.
        
        // The Edge that specifies which Sides this Adjacency links.
        union { null, edu.ucsc.genome.Edge } edge = null;
        
        // The ploidy bounds on this Adjacency or AlleleGroup
        union { null, PloidyBounds } ploidy = null;
        
        // What Genome does this belong to?
        union { null, string } genome = null;
    }
    
    record Term {
        // Represents a variable and its weight in a Constraint.
        
        // What variable are we talking about? Must correspond to a variable
        // used to name a PloidyBounds.
        union { null, string } variable = null;
        
        // What weight should be applied to this variable in the expression?
        union { null, double } weight = null;
    }
    
    record Constraint {
        // A Linear Programming constraint of the form ({weight} * {variable}) +
        // ({weight} * {variable}) + ... <= {constant}
        
        // What are all the variables on the left hand side, with their weights?
        union { null, array<Term> } terms = null;
        
        // What is the constant value that the sum of the terms must be less
        // than or equal to?
        union { null, int } limit = null;
    }
    
}
